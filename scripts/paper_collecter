#! /usr/bin/env python3
"""
paper_collecter script

collects papers from rss feeds and stores them in the database
"""

# % IMPORTS

import feedparser as fp
from pathlib import Path

# % LOCAL IMPORT

from sql_connect import sqlconnector

# % SETTINGS

DIR = Path(__file__).parents[0]  # returns the script directory
DB_PATH = DIR / ".." / "db" / "paperwatch.sqlite"

FEED_EXAMPLE_PATH = DIR / ".." / "example_feeds"
FEED_EXAMPLE = "physics.atom-ph"
USE_FEED_EXAMPLE = True


# % FUNCTIONS


@sqlconnector(DB_PATH)
def load_feeds(db_con):
    # -- prepare sql request
    sql_req = f"select * from feeds;"
    cur = db_con.execute(sql_req)
    # -- store results in dictionnary
    fields = [x[0] for x in cur.description]
    feeds = []
    for row in cur:
        new_feed = {k: v for k, v in zip(fields, row)}
        feeds.append(new_feed)
    return feeds


def get_papers_from_rss(feed):
    # -- read rss flux
    data = fp.parse(feed)
    papers = data["entries"]
    # -- get in good format
    if papers != []:
        while not isinstance(papers[0], dict):
            papers = papers[0]
    return papers


def collect_papers(feeds_list):
    """
    reads rss flux and return a list of papers
    """
    # -- prepare output
    collection = []

    # -- read feeds
    for feed in feeds_list:
        result = {"feed": feed}
        try:
            feed_papers = get_papers_from_rss(feed["url"])
        except Exception as e:
            print("An error occured, let's go on...")
            print(e)
            feed_papers = []
        result["papers"] = feed_papers
        collection.append(result)

    return collection


# % FOR DEBUGGING


def collect_papers_from_example():
    """
    do not connect to an actual rss flux
    but use a feed stored in "../example_feeds" instead
    """
    # -- prepare output
    collection = []

    # -- read feed
    # create a mockup feed
    feed = {
        "id": -1,
        "url": "http://mockup.feed/rss",
        "display_name": "mockup",
        "category": "debug",
    }
    # read
    example_feed = FEED_EXAMPLE_PATH / FEED_EXAMPLE
    with example_feed.open() as f:
        papers = get_papers_from_rss(f.read())
    # result
    result = {"feed": feed, "papers": papers}
    collection.append(result)

    return collection


# % MAIN ROUTINE


def main():
    # 1 - get feeds settings
    feeds = load_feeds()
    print(feeds)
    # 2 - collect papers
    if USE_FEED_EXAMPLE:
        collection = collect_papers_from_example()
    else:
        collection = collect_papers(feeds)

    p = collection[0]["papers"][0]


# % EXECUTION
if __name__ == "__main__":
    main()
